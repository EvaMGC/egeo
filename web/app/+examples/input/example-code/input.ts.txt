import { Component, OnInit, ViewChild } from '@angular/core';
import { StInputError } from 'egeo/components'; // For declare messages in case of error.
import { FormGroup, FormBuilder, Validators, NgForm } from '@angular/forms';


@Component({
   selector: 'input-example',
   templateUrl: './input.component.html',
   styleUrls: ['./input.component.scss']
})

export class InputComponent implements OnInit {
   @ViewChild('templateDrivenForm') public templateDrivenForm: NgForm;

   public model: MyModel = {
      name: 'Egeo',
      description: '',
      components: 10
   };

   public textWithoutSpaces: string = '[a-z]*';
   public disabledPlaceholder: string = 'Field disabled';
   public minLength: number = 3;
   public isDisabled: boolean = false;

   public forceValidations: boolean = false;

   public errors: StInputError = {
      generic: 'Error',
      required: 'This field is required',
      minLength: 'The field min length is: ' + this.minLength,
      pattern: 'Invalid value'
   };

   public reactiveForm: FormGroup; // our model driven form


   constructor(private _fb: FormBuilder) { }

   onSubmitTemplateBased(): void {
      console.log('submit value: ', JSON.stringify(this.model));
   }

   forceValidation(): void {
      this.forceValidations = true;
   }

   onSubmitReactiveForm(): void {
      this.model.description = this.reactiveForm.value.description;
      this.model.components = this.reactiveForm.value.components;
      console.log('submit value: ', JSON.stringify(this.model));
   }

   changeDisabled(): void {
      console.log('change disable');
      this.isDisabled = !this.isDisabled;
      if (this.isDisabled) {
         this.reactiveForm.get('components').disable();
         this.templateDrivenForm.form.get('components-template').disable();
      } else {
         this.reactiveForm.get('components').enable();
         this.templateDrivenForm.form.get('components-template').enable();
      }
   }

   ngOnInit(): void {
      this.reactiveForm = this._fb.group({
         'description': [
               this.model.description,
               [Validators.required, Validators.minLength(this.minLength), Validators.pattern(this.textWithoutSpaces)]
            ],
         'components': [this.model.components, [Validators.required]]
      });
   }
}


interface MyModel {
   name: string;
   description: string;
   components: number;
}
